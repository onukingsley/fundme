{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n    uint256 public minimumAmount = 50 * 10 ** 18;\n    people[] public funds;\n    mapping(address => uint256) public funder;\n\n    address public immutable owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address pricefeedaddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(pricefeedaddress);\n    }\n\n    struct people {\n        address user;\n        uint256 amount;\n    }\n\n    function fund() public payable {\n        require(\n            conversion(msg.value) >= minimumAmount,\n            \"You need to send more ETH\"\n        );\n        funds.push(people(msg.sender, msg.value));\n        funder[msg.sender] += msg.value;\n    }\n\n    function withdraw() public Owneronly {\n        for (uint256 i = 0; i < funds.length; i++) {\n            address fu = funds[i].user;\n            funder[fu] = 0;\n            delete funds;\n        }\n\n        (bool callsuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callsuccess, \"Transfer Unsuccessful\");\n    }\n\n    function pricefeed() public view returns (int256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return price * 10000000000;\n    }\n\n    function conversion(uint256 amount) public view returns (uint256) {\n        return (uint256(pricefeed()) * amount) / 1000000000000000000;\n    }\n\n    modifier Owneronly() {\n        require(msg.sender == owner, \"You be theif!\");\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}